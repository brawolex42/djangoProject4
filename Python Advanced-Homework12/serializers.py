# Python Advanced: Домашнее задание 12
# Домашнее задание: Проект "Менеджер задач" — Создание API для управления задачами
# Цель: Освоить работу с Django REST Framework для создания, получения и агрегирования данных, используя модели задач.
# Задание 1: Эндпоинт для создания задачи
# Создайте эндпоинт для создания новой задачи. Задача должна быть создана с полями title, description, status, и deadline.
# Шаги для выполнения:
# Определите сериализатор для модели Task.
# Создайте представление для создания задачи.
# Создайте маршрут для обращения к представлению.
# Задание 2: Эндпоинты для получения списка задач и конкретной задачи по её ID
# Создайте два новых эндпоинта для:
# Получения списка задач
# Получения конкретной задачи по её уникальному ID
# Шаги для выполнения:
# Создайте представления для получения списка задач и конкретной задачи.
# Создайте маршруты для обращения к представлениям.
# Задание 3: Агрегирующий эндпоинт для статистики задач
# Создайте эндпоинт для получения статистики задач, таких как общее количество задач, количество задач по каждому статусу и количество просроченных задач.
# Шаги для выполнения:
# Определите представление для агрегирования данных о задачах.
# Создайте маршрут для обращения к представлению.
# Оформите ваш ответ следующим образом:
# Код эндпоинтов: Вставьте весь код представлений и маршрутов.
# Скриншоты ручного тестирования: Приложите скриншоты консоли или Postman, подтверждающие успешное выполнение запросов для каждого эндпоинта.
# 1) Создание задачи (POST /api/tasks/)
# Request:
# curl -X POST http://127.0.0.1:8000/api/tasks/ \
#   -H "Content-Type: application/json" \
#   -d '{
#     "title": "Собрать презентацию",
#     "description": "Слайды и демо",
#     "status": "todo",
#     "deadline": "2025-09-01"
#   }'
# Пример ответа:
# {
#   "id": 1,
#   "title": "Собрать презентацию",
#   "description": "Слайды и демо",
#   "status": "todo",
#   "deadline": "2025-09-01",
#   "created_at": "2025-08-24T13:20:00Z",
#   "updated_at": "2025-08-24T13:20:00Z"
# }
# 2) Список задач (GET /api/tasks/)
# Request:
# curl http://127.0.0.1:8000/api/tasks/
# Пример ответа:
# [
#   {
#     "id": 1,
#     "title": "Собрать презентацию",
#     "description": "Слайды и демо",
#     "status": "todo",
#     "deadline": "2025-09-01",
#     "created_at": "2025-08-24T13:20:00Z",
#     "updated_at": "2025-08-24T13:20:00Z"
#   }
# ]
# 3) Конкретная задача по ID (GET /api/tasks/1/)
# Request:
# curl http://127.0.0.1:8000/api/tasks/1/
# Пример ответа:
# {
#   "id": 1,
#   "title": "Собрать презентацию",
#   "description": "Слайды и демо",
#   "status": "todo",
#   "deadline": "2025-09-01",
#   "created_at": "2025-08-24T13:20:00Z",
#   "updated_at": "2025-08-24T13:20:00Z"
# }
# 4) Статистика (GET /api/tasks/stats/)
# Request:
# curl http://127.0.0.1:8000/api/tasks/stats/
# Пример ответа:
# {
#   "total": 3,
#   "by_status": {
#     "todo": 2,
#     "in_progress": 1,
#     "done": 0
#   },
#   "overdue": 1
# }



# from rest_framework import serializers
# from .models import Task
#
# class TaskSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = Task
#         fields = ["id", "title", "description", "status", "deadline", "created_at", "updated_at"]
#         read_only_fields = ["id", "created_at", "updated_at"]
